version: "3.8"

services:
  # core_users:
    # container_name: core_users
    # build:
    #   context: ./services/backend/core
    #   dockerfile: Dockerfile-user
    # environment:
    #   - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
    # ports:
    #   - 5002:5002
  
  core_import:
    container_name: core_import
    build:
      context: ./services/backend/core
      dockerfile: Dockerfile-import
    environment:
      - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
      - PYTHONUNBUFFERED=1
    ports:
      - 8085:8085
  
  core_import_cont:
    container_name: core_import_cont
    build:
      context: ./services/backend/core
      dockerfile: Dockerfile-import-cont
    environment:
      - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
      - PYTHONUNBUFFERED=1
    ports:
      - 8087:8087
  
  # core_import_shipment:
  #   container_name: core_import_shipment
  #   build:
  #     context: ./services/backend/core
  #     dockerfile: Dockerfile-import-shipment
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
  #   ports:
  #     - 8083:8083

  # core_export:
  #   container_name: core_export
  #   build:
  #     context: ./services/backend/core
  #     dockerfile: Dockerfile-export
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
  #   ports:
  #     - 8086:8086

  # core_export_cont:
  #   container_name: core_export_cont
  #   build:
  #     context: ./services/backend/core
  #     dockerfile: Dockerfile-export-cont
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
  #   ports:
  #     - 8088:8088
  
  # core_export_shipment:
  #   container_name: core_export_shipment
  #   build:
  #     context: ./services/backend/core
  #     dockerfile: Dockerfile-export-shipment
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
  #   ports:
  #     - 8084:8084
  
  # core_complex_scraper:
  #   container_name: core_complex_scraper
  #   build:
  #     context: ./services/backend/core
  #     dockerfile: Dockerfile-complex-scraper
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
  #   ports:
  #     - 8081:8081
  
  core_viewall:
    container_name: core_viewall
    build:
      context: ./services/backend/core
      dockerfile: Dockerfile-view-all
    environment:
      - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
      - PYTHONUNBUFFERED=1
    ports:
      - 8089:8089
  
  # core_prefix:
  #   container_name: core_prefix
  #   build:
  #     context: ./services/backend/core
  #     dockerfile: Dockerfile-prefix
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=oracle://wg:wgdemo*()@202.73.56.175:1521/efprod
  #   ports:
  #     - 8082:8082

  # web:
  #   container_name: web
  #   build:
  #     context: ./services/frontend
  #     dockerfile: Dockerfile
  #     args:
  #       - NODE_ENV=development
  #   ports:
  #     - 3000:3000
  #   stdin_open: true
  #   tty: true
  #   # volumes:
  #   # # https://stackoverflow.com/questions/30043872/docker-compose-node-modules-not-present-in-a-volume-after-npm-install-succeeds
  #   #   - web-app-mount:/app/app
  #   #   - web-app-node-modules-mount:/app/app/node_modules
  #   depends_on:
  #     - core_users

  # scraper_ymlu:
  #   container_name: scraper_ymlu
  #   build:
  #     context: ./services/backend/scrapers
  #     dockerfile: Dockerfile-Ymlu
  #   ports:
  #     - 8080:8080

  # scraper_good:
  #   container_name: scraper_good
  #   build:
  #     context: ./services/backend/scrapers
  #     dockerfile: Dockerfile-Goodrich
  #   ports:
  #     - 8081:8081
  


  # swagger:
  #   container_name: swagger
  #   build:
  #     context: ./doc
  #     dockerfile: Dockerfile
  #   ports:
  #     - 8077:8079
  
  # swagger-editor:
  #   image: swaggerapi/swagger-editor
  #   container_name: "swagger-editor-container"
  #   ports:
  #     - "8078:8079"
  # swagger-ui:
  #   image: swaggerapi/swagger-ui
  #   container_name: "swagger-ui-container"
  #   ports:
  #     - "8079:8079"
  #   volumes:
  #     - ./doc:/usr/share/nginx/html/doc
  #   environment:
  #     SWAGGER_JSON: doc/openapi.yml

